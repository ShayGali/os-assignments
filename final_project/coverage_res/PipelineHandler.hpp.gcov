        -:    0:Source:PipelineHandler.hpp
        -:    1:#pragma once
        -:    2:
        -:    3:#include <condition_variable>
        -:    4:#include <functional>
        -:    5:#include <future>
        -:    6:#include <memory>
        -:    7:#include <mutex>
        -:    8:#include <queue>
        -:    9:#include <thread>
        -:   10:
        -:   11:#include "CommandHandler.hpp"
        -:   12:
        -:   13:using std::condition_variable;
        -:   14:using std::function;
        -:   15:using std::future;
        -:   16:using std::invalid_argument;
        -:   17:using std::istringstream;
        -:   18:using std::make_shared;
        -:   19:using std::mutex;
        -:   20:using std::queue;
        -:   21:using std::shared_ptr;
        -:   22:using std::string;
        -:   23:using std::thread;
        -:   24:using std::to_string;
        -:   25:using std::unique_lock;
        -:   26:
        -:   27:/**
        -:   28: * @brief Command handler
        -:   29: *
        -:   30: */
        -:   31:
        -:   32:class ActiveObject {
        -:   33:   private:
        -:   34:    queue<function<void()>> tasks;  // queue of tasks
        -:   35:    thread my_thread;               // thread that will run the tasks
        -:   36:    mutex m;                        // mutex for the tasks queue
        -:   37:    condition_variable cv;          // condition variable to notify the thread that there is a new task
        -:   38:    bool stop = false;              // flag to stop the thread
        -:   39:
        -:   40:    void run();
        -:   41:
        -:   42:   public:
       36:   43:    ActiveObject() {
       71:   44:        my_thread = thread([this] { run(); });
       36:   45:    }
        -:   46:
        -:   47:    ~ActiveObject();
        -:   48:
        -:   49:    void stop_work();
        -:   50:
        -:   51:    /**
        -:   52:     * @brief invoke a function in the active object
        -:   53:     */
        -:   54:    void invoke(function<void()> task);
        -:   55:};
        -:   56:
        -:   57:class PipelineStage : public ActiveObject {
        -:   58:   private:
        -:   59:    function<string(string, int)> task;
        -:   60:    shared_ptr<PipelineStage> next_stage;
        -:   61:
        -:   62:   public:
       36:   63:    PipelineStage(function<string(string, int)> task, shared_ptr<PipelineStage> next_stage)
       36:   64:        : task(std::move(task)), next_stage(next_stage) {}
        -:   65:
        -:   66:    void process(string input, int user_fd, function<void(string)> on_end);
        -:   67:};
        -:   68:
        -:   69:class PipelineHandler : public CommandHandler {
        -:   70:   private:
        -:   71:    // stages of the pipeline
        -:   72:    shared_ptr<PipelineStage> new_graph_stage;
        -:   73:    shared_ptr<PipelineStage> add_edge_stage;
        -:   74:    shared_ptr<PipelineStage> remove_edge_stage;
        -:   75:    shared_ptr<PipelineStage> mst_init_stage;
        -:   76:    shared_ptr<PipelineStage> mst_weight_stage;
        -:   77:    shared_ptr<PipelineStage> mst_longest_stage;
        -:   78:    shared_ptr<PipelineStage> mst_shortest_stage;
        -:   79:    shared_ptr<PipelineStage> mst_avg_stage;
        -:   80:    shared_ptr<PipelineStage> print_graph_stage;
        -:   81:
        -:   82:    string add_edge(string input, int user_fd);
        -:   83:    string remove_edge(string input, int user_fd);
        -:   84:    string mst_init(string input, int user_fd);
        -:   85:    string mst_weight(string input, int user_fd);
        -:   86:    string mst_longest(string input, int user_fd);
        -:   87:    string mst_shortest(string input, int user_fd);
        -:   88:    string mst_avg(string input, int user_fd);
        -:   89:
        -:   90:   public:
        -:   91:    PipelineHandler(map<int, pair<Graph, TreeOnGraph>> &graph_per_user, MSTFactory &mst_factory);
        -:   92:
        -:   93:    void handle(string input, int user_fd, function<void(string)> on_end) override;
        -:   94:
        -:   95:    void stop_work() override;
        -:   96:};
