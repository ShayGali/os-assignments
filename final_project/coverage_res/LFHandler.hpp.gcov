        -:    0:Source:LFHandler.hpp
        -:    1:#pragma once
        -:    2:#include <condition_variable>
        -:    3:#include <functional>
        -:    4:#include <future>
        -:    5:#include <queue>
        -:    6:#include <thread>
        -:    7:#include <vector>
        -:    8:
        -:    9:#include "CommandHandler.hpp"
        -:   10:
        -:   11:constexpr int MAX_THREADS = 4;
        -:   12:class LeaderFollower {
        -:   13:   private:
        -:   14:    std::queue<std::function<void()>> taskQueue;  // queue of tasks that the threads will execute
        -:   15:    std::mutex mutex;                             // mutex the queue
        -:   16:    std::condition_variable cv;                   // condition variable to notify the threads that there is a new task or
        -:   17:    std::atomic<bool> stop;                       // flag to stop the threads
        -:   18:    std::vector<std::thread> threads;             // vector of threads
        -:   19:
        -:   20:   public:
        3:   21:    LeaderFollower() : stop(false) {
       15:   22:        for (size_t i = 0; i < MAX_THREADS; ++i) {  // create the threads and run the workerThread function
       12:   23:            threads.emplace_back(&LeaderFollower::workerThread, this);
        -:   24:        }
        3:   25:    }
        -:   26:
        -:   27:    ~LeaderFollower();
        -:   28:
       16:   29:    void addTask(std::function<void()> task) {
       32:   30:        std::unique_lock<std::mutex> lock(mutex);  // add the task to the queue and notify one of the threads
       16:   31:        taskQueue.push(std::move(task));
       16:   32:        cv.notify_one();
       16:   33:    }
        -:   34:
        2:   35:    void stop_work() {
        2:   36:        stop.store(true);
        2:   37:        cv.notify_all();
        2:   38:    }
        -:   39:
        -:   40:   private:
        -:   41:    void workerThread();
        -:   42:};
        -:   43:
        -:   44:class LFHandler : public CommandHandler {
        -:   45:   private:
        -:   46:    LeaderFollower lf;  // Leader-Follower pattern
        -:   47:
        -:   48:    string cmd_handler(string input, int user_fd);
        -:   49:
        -:   50:   public:
        3:   51:    LFHandler(map<int, pair<Graph, TreeOnGraph>> &graph_per_user, MSTFactory &mst_factory)
        3:   52:        : CommandHandler(graph_per_user, mst_factory) {
        3:   53:    }
        -:   54:
        -:   55:    /**
        -:   56:     * Handle the input command
        -:   57:     * will get a string input and a user file descriptor.
        -:   58:     * add new task to the Leader-Follower pattern
        -:   59:     */
       16:   60:    void handle(string input, int user_fd, function<void(string)> on_end) override {
       16:   61:        lf.addTask([this, input, user_fd, on_end]() {
       16:   62:            string ans = cmd_handler(input, user_fd);  // handle the command
       16:   63:            on_end(ans);                               // call the on_end function with the result
       16:   64:        });
       16:   65:    }
        -:   66:
        2:   67:    void stop_work() override {
        2:   68:        lf.stop_work();
        2:   69:    }
        -:   70:};
