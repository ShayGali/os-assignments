        -:    0:Source:CommandHandler.hpp
        -:    1:#pragma once
        -:    2:
        -:    3:#include <functional>
        -:    4:#include <iostream>
        -:    5:#include <map>
        -:    6:#include <mutex>
        -:    7:#include <sstream>
        -:    8:
        -:    9:#include "Graph.hpp"
        -:   10:#include "MSTFactory.hpp"
        -:   11:#include "TreeOnGraph.hpp"
        -:   12:#include "client_commands.hpp"
        -:   13:
        -:   14:using std::function;
        -:   15:using std::istringstream;
        -:   16:using std::map;
        -:   17:using std::string;
        -:   18:
        -:   19:class CommandHandler {
        -:   20:   public:
       7*:   21:    CommandHandler(map<int, pair<Graph, TreeOnGraph>> &graph_per_user, MSTFactory &mst_factory) : graph_per_user(graph_per_user), mst_factory(mst_factory) {}
------------------
_ZN14CommandHandlerC2ERSt3mapIiSt4pairI5Graph11TreeOnGraphESt4lessIiESaIS1_IKiS4_EEER10MSTFactory:
        7:   21:    CommandHandler(map<int, pair<Graph, TreeOnGraph>> &graph_per_user, MSTFactory &mst_factory) : graph_per_user(graph_per_user), mst_factory(mst_factory) {}
------------------
_ZN14CommandHandlerC2ERSt3mapIiSt4pairI5Graph11TreeOnGraphESt4lessIiESaIS1_IKiS4_EEER10MSTFactory:
    #####:   21:    CommandHandler(map<int, pair<Graph, TreeOnGraph>> &graph_per_user, MSTFactory &mst_factory) : graph_per_user(graph_per_user), mst_factory(mst_factory) {}
------------------
       7*:   22:    virtual ~CommandHandler() = default;
------------------
_ZN14CommandHandlerD0Ev:
    #####:   22:    virtual ~CommandHandler() = default;
------------------
_ZN14CommandHandlerD2Ev:
        7:   22:    virtual ~CommandHandler() = default;
------------------
_ZN14CommandHandlerD0Ev:
    #####:   22:    virtual ~CommandHandler() = default;
------------------
_ZN14CommandHandlerD2Ev:
    #####:   22:    virtual ~CommandHandler() = default;
------------------
        -:   23:    virtual void handle(string input, int user_fd, function<void(string)> on_end) = 0;
        -:   24:    virtual void stop_work() = 0;
        -:   25:
        -:   26:   protected:
        -:   27:    map<int, pair<Graph, TreeOnGraph>> &graph_per_user;
        -:   28:    MSTFactory &mst_factory;
        -:   29:    std::mutex graph_mutex;
        -:   30:
        -:   31:    /**
        -:   32:     * @brief Initialize the graph with the given number of vertices and edges
        -:   33:     * expected input: n m u1 v1 w1 u2 v2 w2 ... um vm wm
        -:   34:     */
       7*:   35:    string init_graph(string input, int user_fd) {
      14*:   36:        istringstream iss(input);
      26*:   37:        string first, second, third, send_data;
        -:   38:        int n, m, i, u, v, w;
       7*:   39:        if (!(iss >> n >> m)) {
       1*:   40:            throw std::invalid_argument("Invalid input - expected n and m");
        -:   41:        }
       9*:   42:        Graph temp(n);
       6*:   43:        i = 0;
      14*:   44:        while (i < m) {
      11*:   45:            if (!(iss >> first >> second >> third)) {  // buffer is empty (we assume that we dont have the first in the buffer, we need to get both of them)
       1*:   46:                throw std::invalid_argument("Invalid input - you dont send the " + std::to_string(i + 1) + " edge");
        -:   47:            }
        -:   48:            // convert string to int
      10*:   49:            u = stoi(first);
      10*:   50:            v = stoi(second);
      10*:   51:            w = stoi(third);
        -:   52:
        -:   53:            // check if u and v are valid
      10*:   54:            if (u <= 0 || u > n || v <= 0 || v > n || u == v) {
       1*:   55:                throw std::invalid_argument("Invalid input - invalid edge. Edge must be between 1 and " + std::to_string(n) + " and u != v. Got: " + first + " " + second);
        -:   56:            }
        -:   57:
       9*:   58:            if (w <= 0) {
       1*:   59:                throw std::invalid_argument("Invalid input - invalid weight. Weight must be greater than 0. Got: " + third);
        -:   60:            }
        -:   61:
        -:   62:            // add edge to the graph
       8*:   63:            temp.addEdge(u - 1, v - 1, w);
       8*:   64:            temp.addEdge(v - 1, u - 1, w);
       8*:   65:            i++;
        -:   66:        }
        -:   67:
        -:   68:        // if we reach here, we have a valid graph
       3*:   69:        graph_mutex.lock();
       3*:   70:        graph_per_user[user_fd].first = temp;
       3*:   71:        graph_mutex.unlock();
       6*:   72:        return "New graph created\n";
        -:   73:    }
        -:   74:};
