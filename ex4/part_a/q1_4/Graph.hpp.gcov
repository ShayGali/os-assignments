        -:    0:Source:Graph.hpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:6
        -:    1:#pragma once
        -:    2:#include <algorithm>
        -:    3:#include <iostream>
        -:    4:#include <vector>
        -:    5:
        -:    6:using std::cout;
        -:    7:using std::endl;
        -:    8:using std::vector;
        -:    9:constexpr int NO_EDGE = 0;
        -:   10:
        -:   11:// A class that represents an undirected graph
        -:   12:class Graph {
        -:   13:   private:
        -:   14:    vector<vector<int>> adjMat;  // Adjacency matrix
        -:   15:
        -:   16:    // helper functions for finding Eulerian cycle
        -:   17:    bool isEulerian();
        -:   18:    void printEulerUtil(int s);
        -:   19:
        -:   20:    // This function returns count of vertices reachable
        -:   21:    // from v. It does DFS
        -:   22:    int DFSCount(int v, bool visited[]);
        -:   23:
        -:   24:    // Utility function to check if edge u-v is a valid next
        -:   25:    // edge in Eulerian trail or circuit
        -:   26:    bool isValidNextEdge(int u, int v);
        -:   27:
        -:   28:   public:
        -:   29:    // Constructor and destructor
        2:   30:    Graph(int n) {
        2:   31:        adjMat = vector<vector<int>>(n, vector<int>(n, NO_EDGE));
        2:   32:    }
        -:   33:    // functions to add and remove edge
      104:   34:    void addEdge(int u, int v) {
      104:   35:        adjMat[u][v] = 1;
      104:   36:        adjMat[v][u] = 1;
      104:   37:    }
        -:   38:
        -:   39:    void rmvEdge(int u, int v);
        -:   40:
      112:   41:    bool isEdge(int u, int v) {
      112:   42:        return adjMat[u][v] != NO_EDGE;
        -:   43:    }
        -:   44:
        -:   45:    // Methods to print Eulerian tour
        -:   46:    void printEulerCycle();
        -:   47:};
