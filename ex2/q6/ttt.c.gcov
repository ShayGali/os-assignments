        -:    0:Source:ttt.c
        -:    0:Graph:ttt.gcno
        -:    0:Data:ttt.gcda
        -:    0:Runs:19
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <unistd.h>
        -:    4:
        -:    5:#define EMPTY '_'
        -:    6:#define COMPUTER 'X'
        -:    7:#define PLAYER 'O'
        -:    8:
        -:    9:/**
        -:   10: * check if we get a permutation of 1-9
        -:   11: * @param input the input string
        -:   12: */
       18:   13:void validate_input(const char *input) {
       18:   14:    int counter[9] = {0};
      169:   15:    while (*input) {
      153:   16:        if (*input < '1' || *input > '9') {
        1:   17:            printf("Invalid input - input should be between 1 and 9\n");
        1:   18:            printf("got: %c, ascii: %d\n", *input, *input);
        1:   19:            exit(1);
        -:   20:        }
        -:   21:
      152:   22:        counter[*input - '1']++;
      152:   23:        if (counter[*input - '1'] > 1) {
        1:   24:            printf("Invalid input - duplicate number %c\n", *input);
        1:   25:            exit(1);
        -:   26:        }
      151:   27:        input++;
        -:   28:    }
        -:   29:
        -:   30:    // check if we have all the numbers
      159:   31:    for (int i = 0; i < 9; i++) {
      144:   32:        if (counter[i] != 1) {
        1:   33:            printf("Invalid input - missing number %d\n", i + 1);
        1:   34:            exit(1);
        -:   35:        }
        -:   36:    }
       15:   37:}
        -:   38:
        -:   39:/**
        -:   40: * check if the move is a winning move
        -:   41: */
       79:   42:int check_if_win(char board[3][3], int x, int y) {
        -:   43:    // check the row of x - the y is changing
       79:   44:    if (board[x][0] == board[x][1] && board[x][1] == board[x][2]) {
        2:   45:        return 1;
        -:   46:    }
        -:   47:    // check the column of y - the x is changing
       77:   48:    if (board[0][y] == board[1][y] && board[1][y] == board[2][y]) {
        7:   49:        return 1;
        -:   50:    }
        -:   51:    // main diagonal
       70:   52:    if (x == y) {
       29:   53:        if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        1:   54:            return 1;
        -:   55:        }
        -:   56:    }
        -:   57:
        -:   58:    // secondary diagonal
       69:   59:    if (x + y == 2) {
       26:   60:        if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        1:   61:            return 1;
        -:   62:        }
        -:   63:    }
        -:   64:
       68:   65:    return 0;
        -:   66:}
        -:   67:
        -:   68:/**
        -:   69: * print the board
        -:   70: */
       80:   71:void print_board(char board[3][3]) {
      320:   72:    for (int i = 0; i < 3; i++) {
      960:   73:        for (int j = 0; j < 3; j++) {
      720:   74:            printf("%c ", board[i][j]);
        -:   75:        }
      240:   76:        printf("\n");
        -:   77:    }
       80:   78:}
        -:   79:
        -:   80:/**
        -:   81: * make a move for the computer
        -:   82: * @param board the board
        -:   83: * @param input a pointer to the input string (will be incremented until a valid move is found)
        -:   84: * @return 1 if the move is a winning move, 0 otherwise
        -:   85: */
       81:   86:int make_computer_move(char board[3][3], const char **input) {
        -:   87:    int x, y, computer_move;
        -:   88:    while (1) {
       81:   89:        computer_move = (**input - '1');
       81:   90:        x = computer_move / 3;
       81:   91:        y = computer_move % 3;
       81:   92:        if (board[x][y] == EMPTY) {
       42:   93:            board[x][y] = COMPUTER;
       42:   94:            break;
        -:   95:        }
       39:   96:        (*input)++;
        -:   97:    }
       42:   98:    printf("Computer played: (%d, %d)\n", x, y);
       42:   99:    return check_if_win(board, x, y);
        -:  100:}
        -:  101:
        -:  102:/**
        -:  103: * make a move for the user
        -:  104: * @param board the board
        -:  105: * @return 1 if the move is a winning move, 0 otherwise
        -:  106: */
       42:  107:int make_user_move(char board[3][3]) {
        -:  108:    int x, y, user_input;
        -:  109:    while (1) {
       42:  110:        printf("Enter your move: (1-9)\n");
       42:  111:        fflush(stdout);
       42:  112:        if (scanf("%d", &user_input) != 1) {
        3:  113:            printf("Unexpected behavior - GOODBYE\n");
        -:  114:            // clear the buffer
        3:  115:            exit(EXIT_FAILURE);
       39:  116:        } else if (user_input < 1 || user_input > 9) {
        1:  117:            printf("Invalid input - input should be between 1 and 9\n");
        -:  118:        } else {
       38:  119:            x = (user_input - 1) / 3;
       38:  120:            y = (user_input - 1) % 3;
       38:  121:            if (board[x][y] == EMPTY) {
       37:  122:                board[x][y] = PLAYER;
       37:  123:                printf("You played: (%d, %d)\n", x, y);
       37:  124:                break;
        -:  125:            } else {
        1:  126:                printf("Cell already taken\n");
        -:  127:            }
        -:  128:        }
        -:  129:    }
        -:  130:
       37:  131:    return check_if_win(board, x, y);
        -:  132:}
        -:  133:
       19:  134:int main(int argc, char const *argv[]) {
       19:  135:    if (argc != 2) {
        1:  136:        printf("Usage: %s <numbers>\n", argv[0]);
        1:  137:        return 1;
        -:  138:    }
        -:  139:
       18:  140:    validate_input(argv[1]);
        -:  141:
       15:  142:    const char *input = argv[1];
        -:  143:    // fill the board with empty cells
        -:  144:    char board[3][3];
       60:  145:    for (int i = 0; i < 3; i++) {
      180:  146:        for (int j = 0; j < 3; j++) {
      135:  147:            board[i][j] = EMPTY;
        -:  148:        }
        -:  149:    }
        -:  150:
        -:  151:    int is_won;
       83:  152:    for (int round = 0; round < 9; round++) {
       82:  153:        if (round % 2 == 0) {
       42:  154:            sleep(0.5);  // sleep for half a second so it's will be fun
       42:  155:            is_won = make_computer_move(board, &input);
       42:  156:            if (is_won) {
        1:  157:                printf("\n\n\033[0;31mComputer won!\033[0m\n\n");
        -:  158:            }
        -:  159:        } else {
       40:  160:            is_won = make_user_move(board);
       37:  161:            if (is_won) {
       10:  162:                printf("\n\n\033[0;32mYou won!\033[0m\n\n");
        -:  163:            }
        -:  164:        }
        -:  165:
       79:  166:        print_board(board);
       79:  167:        printf("\n");
        -:  168:
       79:  169:        if (is_won) {
       11:  170:            fflush(stdout);
       11:  171:            return 0;
        -:  172:        }
        -:  173:    }
        -:  174:
        -:  175:    // if we reached here, it's a draw
        1:  176:    printf("\n\n\033[0;33mDRAW!\033[0m\n\n");
        1:  177:    print_board(board);
        1:  178:    printf("\n");
        1:  179:    fflush(stdout);
        1:  180:    return 0;
        -:  181:}
